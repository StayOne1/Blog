<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://stayone1.github.io</id>
    <title>Youyi&#39;s Blog • Posts by &#34;数据库&#34; category</title>
    <link href="https://stayone1.github.io" />
    <updated>2022-09-01T11:07:00.000Z</updated>
    <category term="设计模式" />
    <category term="JAVA" />
    <category term="sql" />
    <entry>
        <id>https://stayone1.github.io/2022/09/01/sql/</id>
        <title>SQL</title>
        <link rel="alternate" href="https://stayone1.github.io/2022/09/01/sql/"/>
        <content type="html">&lt;p&gt;&lt;em&gt;这个主要是整理之前学习时的笔记 持续更新 欢迎大家留言 批评指正&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;SQL&#34;&gt;&lt;a href=&#34;#SQL&#34; class=&#34;headerlink&#34; title=&#34;SQL&#34;&gt;&lt;/a&gt;SQL&lt;/h1&gt;&lt;h2 id=&#34;SQL通用语法&#34;&gt;&lt;a href=&#34;#SQL通用语法&#34; class=&#34;headerlink&#34; title=&#34;SQL通用语法&#34;&gt;&lt;/a&gt;SQL通用语法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;SQL语句可以单行或多行书写，以分号结尾。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以使用空格和缩进提高可读性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MySQL中SQL语句不区分大小写，关键字建议大写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3种注释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单行注释&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 注释内容
# 注释内容
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多行注释&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;/*
注释
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;DDL语句&#34;&gt;&lt;a href=&#34;#DDL语句&#34; class=&#34;headerlink&#34; title=&#34;DDL语句&#34;&gt;&lt;/a&gt;DDL语句&lt;/h2&gt;&lt;p&gt;DDL（Data Definition Language）数据定义语言，用来定义数据库对象“数据库，表，列等。关键字：create,drop,alter等&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;操作数据库：CRUD&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;C(Create):创建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;R(Retrieve):查询&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;U(Update):修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;D(Delete):删除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用数据库&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#创建
基本创建
create database 数据库名;
如果不存在，再进行创建
create database if not exists 数据库名;
指定字符集
create database 数据库名 character set 字符集;

#查询
查询所有数据库的名称
show databases;
查看某数据库创建语句
show create database 数据库名称;

#修改
修改数据库的字符集
alter database 数据库名 character set 字符集名;

#删除
删除数据库
drop database 数据库名称;
判断是否存在
drop database if exists 数据库名字;

#使用
查询当前正在使用的数据库
select database();
切换到对应数据库
use 数据库名;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;操作表：CRUD&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;SQL&#34;&gt;#创建
创建表
create table 表名(
    列名1 数据类型1,
    列名2 数据类型2,
    ...
    列名n 数据类型n
);
复制表
create table 表名 like 表名;
#查询
查询某个数据库中所有的表名称
show tables;
查询表结构
desc 表名;
#修改
修改表名
alter table 表名 rename to 新表名;
修改表的字符集
alter table 表名 character set 字符集;
添加列
alter table 表名 add 列名 数据类型;
修改列名、类型
alter table 表名 change 列名 新列名 类型;
只修改列类型
alter table 表名 modify 列名 列类型;
删除列
alter table 表名 drop 列名;
#删除
drop table 表名;
drop table if exists 表名;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;DQL语句&#34;&gt;&lt;a href=&#34;#DQL语句&#34; class=&#34;headerlink&#34; title=&#34;DQL语句&#34;&gt;&lt;/a&gt;DQL语句&lt;/h2&gt;&lt;p&gt;DQL(Data Query Language)数据查询语言 用来查询数据库中表的记录。关键字：select,where等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础查询  字段名后可以加 [AS] 别名&lt;/li&gt;
&lt;li&gt;条件查询  条件运算符 between … and …    and   or&lt;/li&gt;
&lt;li&gt;分组查询  &lt;/li&gt;
&lt;li&gt;排序查询  升序ASC 降序DESC&lt;/li&gt;
&lt;li&gt;分页查询 起始索引（从0开始），每页展示记录数&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;基础查询&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;多个字段的查询&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;去除重复&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;起别名&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#多个字段的查询
select 字段1,字段2,...,字段n from 表名;
select * from 表名;
#去除重复
select distinct 字段名 from 表名;
#计算列，数值型
select 字段1,字段2,字段1+字段2 from 表名;
select 字段1,字段2,字段1+IFNULL(字段2,0) from 表名; //当某字段值为null时
#起别名
select 字段1,字段2,字段1+IFNULL(字段2,0) AS(可以省略) 总分 from 表名; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;条件查询&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;where 子句后跟条件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运算符&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#where
select 字段名 from 表名 where 条件;
#运算符
&amp;lt; &amp;gt; &amp;lt;= &amp;gt;= == &amp;lt;&amp;gt;(!=)
between and 
like
is null
and 或 &amp;amp;&amp;amp;
or 或 ||
not 或 !
in
#注意
NULL值不能使用运算符判断  要用is
where 字段名 is null
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模糊查询&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#占位符
_:单个任意字符
%:多个任意字符
#语法
select 字段 from 表名 where 字段名 like ;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;排序查询&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#语法
order by 排序字段1 排序方式1,...,排序字段n 排序方式n;
排序方式省略时默认按照升序排序
#排序方式
ASC：升序，默认
DESC：降序
#多字段优先级
语句前面的字段更优先
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;聚合函数(将一列数据纵向计算)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;count:计算个数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;max:计算最大值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;min:计算最小值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sum:求和&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;avg:平均值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#count
select count(*) from 表名;
select count(字段名) from 表名;
字段可以使用IFNULL转换
#max
select max(字段名) from 表名;
#min
select min(字段名) from 表名;
#sum
select sum(字段名) from 表名;
#avg
#注意
聚合函数的计算，排除NULL值
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分组查询&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#语法
group by 分组字段;
#注意
分组之后查询的字段：分组字段、聚合函数
#分组前过滤，即不参与分组
select 字段 from 表名 where 条件 group by 字段;
#分组后过滤
select 字段 from 表名 group by 字段 having 条件;

#where 和 having 的区别
where 在分组之前进行限定，如果不满足条件，则不参与分组。 having 在分组之后进行限定，如果不满足结果，则不会被查询出来。
where 后不可以跟聚合函数，having可以进行聚合函数的判断
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分页查询&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#语法
limit 开始的索引,每页查询的条数;
#公式
开始的索引 = (当前页码-1)*每页显示的条数
#分页操作是一个方言，不同数据库存在区别
limit是mysql的
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;DQL-编写顺序&#34;&gt;&lt;a href=&#34;#DQL-编写顺序&#34; class=&#34;headerlink&#34; title=&#34;DQL-编写顺序&#34;&gt;&lt;/a&gt;DQL-编写顺序&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SELECT
      字段列表
FROM
      表名列表
WHERE
      条件列表 #分组之前过滤
GROUP BY
      分组字段列表
HAVING
      分组后条件列表 #分组之后过滤
ORDER BY 
      排序字段列表
LIMIT
      分页参数
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;DQL-执行顺序&#34;&gt;&lt;a href=&#34;#DQL-执行顺序&#34; class=&#34;headerlink&#34; title=&#34;DQL-执行顺序&#34;&gt;&lt;/a&gt;DQL-执行顺序&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;FROM
      表名列表
WHERE
      条件列表
GROUP BY
      分组字段列表
HAVING
      分组后条件列表
SELECT
      字段列表
ORDER BY
      排序字段列表
LIMIT
      分页参数
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;DCL语句&#34;&gt;&lt;a href=&#34;#DCL语句&#34; class=&#34;headerlink&#34; title=&#34;DCL语句&#34;&gt;&lt;/a&gt;DCL语句&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DCL-介绍&lt;/p&gt;
&lt;p&gt;DCL-数据控制语言，用来管理数据库用户以及用户对数据库的访问权限,关键字：GRANT,REVOKE等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DCL-管理用户&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查询用户&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;USE mysql; 
SELLECT * FROM user;
#注意
%指可以在任意主机登录
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建用户&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;CREATE USER &amp;#39;用户名&amp;#39;@&amp;#39;主机名&amp;#39; IDENTIFIED BY &amp;#39;密码&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改用户密码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;ALTER USER &amp;#39;用户名&amp;#39;@&amp;#39;主机名&amp;#39; IDENTIFIED WITH mysql_native_password by &amp;#39;新密码&amp;#39;;
#root改其它
update user set password = password(&amp;#39;新密码&amp;#39;) where user = &amp;#39;用户名&amp;#39;;
set password for &amp;#39;用户名&amp;#39;@&amp;#39;主机名&amp;#39; = password(&amp;#39;新密码&amp;#39;);
#mysql 忘记root密码
1. cmd -- &amp;gt; net stop mysql  //管理员
2. 使用无验证方式启动Mysql服务  mysqld --skip-grant-tables
3. 新开cmd然后直接输入mysql 回车 无验证登录后修改密码
4. 任务管理器结束mysqld进程
5. 打开mysql服务 net start mysql
6. 正常登录
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除用户&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;DROP USER &amp;#39;用户名&amp;#39;@&amp;#39;主机名&amp;#39;;
#权限说明
usage ： 可以登录
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DCL-授权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查询权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show grants for &amp;#39;用户名&amp;#39;@&amp;#39;主机名&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;授予权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;grant 权限列表 on 数据库.表名 to &amp;#39;用户名&amp;#39;@&amp;#39;主机名&amp;#39;;
#授予所有权限
grant all on *.* to &amp;#39;用户名&amp;#39;@&amp;#39;主机名&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;撤销权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;revoke 权限列表 on 数据库.表名 from &amp;#39;用户名&amp;#39;@&amp;#39;主机名&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DBA：数据库管理员&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;DML语句&#34;&gt;&lt;a href=&#34;#DML语句&#34; class=&#34;headerlink&#34; title=&#34;DML语句&#34;&gt;&lt;/a&gt;DML语句&lt;/h2&gt;&lt;p&gt;DML(Data Manipulation Language)数据操作语言 用来对表中的数据进行增删查改。关键字：insert,delete,update等&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#添加数据
insert into 表名(列名1,列名2,...,列名n) values(值1,值2,...,值n);
列名要和值一一对应
如果不指定列名，则默认给所有列添加值
除了数字，其他都要用引号引起来，单双引号都可以

#删除数据
delete from 表名 [where 条件];
如果不加条件，则删除表中所有的记录
如果要删除表中所有记录，有两种方式。不推荐使用delete，效率低。建议使用后者。

删除表，然后再创建一个一模一样的空表
TRUNCATE TABLE 表名;

#修改数据
update 表名 set 列名1 = 值1,... [where 条件];
如果不加任何条件，则会修改所有记录
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;约束&#34;&gt;&lt;a href=&#34;#约束&#34; class=&#34;headerlink&#34; title=&#34;约束&#34;&gt;&lt;/a&gt;约束&lt;/h2&gt;&lt;p&gt;概念 ： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。&lt;/p&gt;
&lt;p&gt;分类 ： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;主键约束：primary key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;非空约束：not null&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;唯一约束：unique&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外键约束：foreign key&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#主键约束,非空且唯一，一张表只能有一个主键
主键即表中记录的唯一标识

创建表时添加约束
Create table stu&amp;#123;
    id int primary key,
    name varchar(10) 
&amp;#125;;
创建表后添加约束
alter table 表名 modify 字段名 字段类型 primary key;
删除约束
alter table 表名 drop primary key;
自动增长，如果某一列是数值类型，可以使用auto_increment 可以自动增长
创建表时添加约束，并使其自动增长
Create table stu&amp;#123;
    id int primary key auto_increment,
    name varchar(10) 
&amp;#125;;
删除自动增长，并不会删除主键
alter table 表名 modify 字段名 字段类型;
添加自动增长
alter table 表名 modify 字段名 字段类型 auto_increment;

#非空约束
创建表时添加约束
Create table stu&amp;#123;
    id int,
    name varchar(10) not null
&amp;#125;;
创建表后添加非空约束
alter table 表名 modify 字段名 字段类型 not null;
删除非空约束
alter table 表名 modify 字段名 字段类型;

#唯一约束,值不能重复
创建表时添加约束
Create table stu&amp;#123;
    id int,
    name varchar(10) unique
&amp;#125;;
创建表后添加约束
alter table 表名 modify 字段名 字段类型 unique;
删除约束
alter table 表名 drop index 字段名;
注意
唯一约束可以有null，但只能有一个为null

#外键约束,让表与表产生关系
创建表时，可以添加外键
create table 表名&amp;#123;
    ...
    外键列,
    constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)
&amp;#125;;
删除外键
alter table 表名 drop foreign key 外键名称;
创建表后，添加外键
alter table 表名 add constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称);

#级联
添加外键，设置级联更新
alter table 表名 add constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称) on update cascade;
设置级联删除
on delete cascade
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数据库的设计&#34;&gt;&lt;a href=&#34;#数据库的设计&#34; class=&#34;headerlink&#34; title=&#34;数据库的设计&#34;&gt;&lt;/a&gt;数据库的设计&lt;/h2&gt;&lt;h3 id=&#34;多表关系&#34;&gt;&lt;a href=&#34;#多表关系&#34; class=&#34;headerlink&#34; title=&#34;多表关系&#34;&gt;&lt;/a&gt;多表关系&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一对一(了解)&lt;/p&gt;
&lt;p&gt;如：人和身份证&lt;/p&gt;
&lt;p&gt;分析：一个人只有一个身份证，一个身份证只能对应一个人&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一对多(多对一)&lt;/p&gt;
&lt;p&gt;如：部门和员工&lt;/p&gt;
&lt;p&gt;分析：一个部门有多个员工，一个员工只能对应一个部门&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多对多&lt;/p&gt;
&lt;p&gt;如：学生和课程&lt;/p&gt;
&lt;p&gt;分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#实现

#一对多关系实现
设计两个表，使用外键实现。在多的一方建立外键，指向一的一方的主键。
#实现多对多关系
借助第三张表，中间表(t_xx_xx)。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键。
#一对一关系
任意一方建立外键，指向另一方的主键。外键添加唯一约束。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数据库设计的范式&#34;&gt;&lt;a href=&#34;#数据库设计的范式&#34; class=&#34;headerlink&#34; title=&#34;数据库设计的范式&#34;&gt;&lt;/a&gt;数据库设计的范式&lt;/h3&gt;&lt;p&gt;概念：设计数据库时，需要遵循的一些规范。各种范式呈递次规范，越高的范式数据库冗余越小。要遵循后边的范式，必须先遵循前边的所有范式要求。&lt;/p&gt;
&lt;p&gt;目前关系数据库有六种范式：第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)、第五范式(5NF)&lt;/p&gt;
&lt;p&gt;分类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一范式：每一列都是不可分割的原子数据项。&lt;/p&gt;
&lt;p&gt;存在的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;存在严重的数据冗余&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据添加时存在问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除数据时存在问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二范式：在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）&lt;/p&gt;
&lt;p&gt;概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数依赖：A–&amp;gt;B，如果通过A属性(属性组)的值，可以确定唯一B属性的值，则称B依赖于A&lt;ul&gt;
&lt;li&gt;学号 –&amp;gt; 姓名  &lt;/li&gt;
&lt;li&gt;(学号，课程名称) –&amp;gt; 分数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完全函数依赖：A –&amp;gt; B ，如果A是一个属性组，则B属性值的确定需要依赖A属性组中所有属性的值&lt;ul&gt;
&lt;li&gt;(学号，课程名称) –&amp;gt; 分数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;部分函数依赖：A–&amp;gt;B ，如果A是一个属性组，则B属性值只需要依赖A中某一些值即可&lt;ul&gt;
&lt;li&gt;(学号，课程名称) –&amp;gt; 姓名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;传递函数依赖：A–&amp;gt;B B–&amp;gt;C   如果通过A属性(属性组)的值，可以确定唯一B属性的值，再通过B属性(属性组)的值，可以确定唯一C属性的值，则称C传递函数依赖于A&lt;/li&gt;
&lt;li&gt;码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码。&lt;ul&gt;
&lt;li&gt;(学号，课程名称)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主属性：码属性组中的所有属性&lt;/li&gt;
&lt;li&gt;非主属性：除码属性组的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	3. 第三范式：在2NF的基础上，任何非主属性不依赖于其他非主属性(在2NF基础上消除传递依赖)&lt;/p&gt;
&lt;h2 id=&#34;数据库的备份和还原&#34;&gt;&lt;a href=&#34;#数据库的备份和还原&#34; class=&#34;headerlink&#34; title=&#34;数据库的备份和还原&#34;&gt;&lt;/a&gt;数据库的备份和还原&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;命令行方式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#备份
mysqldump -u用户名 -p密码 数据库名 &amp;gt; 保存的路径    //路径包含文件名后缀
#还原
登录
创建数据库
使用数据库
执行文件 source 文件路径
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图形化工具&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;多表查询&#34;&gt;&lt;a href=&#34;#多表查询&#34; class=&#34;headerlink&#34; title=&#34;多表查询&#34;&gt;&lt;/a&gt;多表查询&lt;/h2&gt;&lt;p&gt;笛卡尔积&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;内连接查询&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;隐式内连接：使用where条件消除无用数据&lt;/li&gt;
&lt;li&gt;显式内连接：&lt;br&gt;&amp;#96;&amp;#96;&amp;#96; sql&lt;br&gt;#隐式内连接查询&lt;br&gt;select 字段 from 表1,表2 where 表一.字段名 运算符 表二.字段名;&lt;br&gt;#显示内连接&lt;br&gt;select 字段 from 表1 [inner] join 表2 on 条件;&lt;br&gt;#注意&lt;br&gt;从哪些表中查询数据、查询条件是什么、查询哪些字段&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外连接查询&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;左外连接：查询的是左表所有数据以及其交集部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;右外连接：查询的是右表所有数据以及其交集部分&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#左外连接
select 字段列表 from 表1 left [outer] join 表2 on 条件;
#右外连接
select 字段列表 from 表1 right [outer] join 表2 on 条件;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子查询&lt;/p&gt;
&lt;p&gt;概念： 查询中嵌套查询，称嵌套查询为子查询&lt;/p&gt;
&lt;p&gt;分类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;子查询的结果是单行单列的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;子查询可以作为条件 使用运算符去判断
select 字段列表 from 表名 where 字段 运算符 (子查询语句);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子查询的结果是多行单列的；&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;select 字段列表 from 表名 where 字段 in (子查询语句);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子查询的结果是多行多列的。&lt;/p&gt;
&lt;p&gt;子查询可以作为一张虚拟表，起一个别名&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;select 字段列表 from 表1 别名,(子查询语句) 别名 where 条件;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;事务&#34;&gt;&lt;a href=&#34;#事务&#34; class=&#34;headerlink&#34; title=&#34;事务&#34;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;h3 id=&#34;事务的基本介绍&#34;&gt;&lt;a href=&#34;#事务的基本介绍&#34; class=&#34;headerlink&#34; title=&#34;事务的基本介绍&#34;&gt;&lt;/a&gt;事务的基本介绍&lt;/h3&gt;&lt;p&gt;概念：如果一个包含多个步骤的业务操作，被事务管理，要么同时成功，要么同时失败。&lt;/p&gt;
&lt;p&gt;操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 开启事务：start transaction
1. 回滚：rollback
1. 提交：commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MyQL数据库中事务默认自动提交。开启事务后需要手动提交。Oracle默认是手动提交&lt;/p&gt;
&lt;p&gt;修改事务的默认提交方式：&lt;/p&gt;
&lt;p&gt;select @@autocommit; – 0是手动提交 1是自动提交&lt;/p&gt;
&lt;p&gt;set @@autocommit &amp;#x3D; 对应数值;&lt;/p&gt;
&lt;h3 id=&#34;事务的四大特征&#34;&gt;&lt;a href=&#34;#事务的四大特征&#34; class=&#34;headerlink&#34; title=&#34;事务的四大特征&#34;&gt;&lt;/a&gt;事务的四大特征&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败&lt;/li&gt;
&lt;li&gt;持久性：如果事务一旦提交或者回滚后，数据库会持久化的保存数据。&lt;/li&gt;
&lt;li&gt;隔离性：多个事务之间，相互独立&lt;/li&gt;
&lt;li&gt;一致性：事务操作前后，数据总量不变。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事务的隔离级别&#34;&gt;&lt;a href=&#34;#事务的隔离级别&#34; class=&#34;headerlink&#34; title=&#34;事务的隔离级别&#34;&gt;&lt;/a&gt;事务的隔离级别&lt;/h3&gt;&lt;p&gt;概念：多个事务之间是隔离，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。&lt;/p&gt;
&lt;p&gt;存在问题：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 脏读：一个事务，读取到另一个事务中没有提交的数据
1. 不可重复读：在同一个事务中，两次读取到的数据不一样
1. 幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;隔离级别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;read uncommitted：读未提交&lt;/p&gt;
&lt;p&gt;产生的问题：脏读、不可重复读、幻读&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;read committed：读已提交（Oracle默认）&lt;/p&gt;
&lt;p&gt;产生的问题：不可重复读、幻读&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;repeatable read：可重复读（MySQL默认）&lt;/p&gt;
&lt;p&gt;产生的：幻读&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;serializable：串行化&lt;/p&gt;
&lt;p&gt;产生的问题：可以解决所有的问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	注意：隔离级别从小到大安全性越来越高，但是效率越来越低&lt;/p&gt;
&lt;p&gt;​	设置隔离级别:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;#数据库查询隔离级别
select @@tx_isolation
#数据库设置隔离级别
set global transaction isolation level 级别字符串;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;MySQL&#34;&gt;&lt;a href=&#34;#MySQL&#34; class=&#34;headerlink&#34; title=&#34;MySQL&#34;&gt;&lt;/a&gt;MySQL&lt;/h1&gt;&lt;h3 id=&#34;mysql服务的启动与关闭&#34;&gt;&lt;a href=&#34;#mysql服务的启动与关闭&#34; class=&#34;headerlink&#34; title=&#34;mysql服务的启动与关闭&#34;&gt;&lt;/a&gt;mysql服务的启动与关闭&lt;/h3&gt;&lt;p&gt;使用管理员身份在控制台输入&lt;/p&gt;
&lt;p&gt;net start&amp;#x2F;stop mysql&lt;/p&gt;
</content>
        <category term="sql" />
        <updated>2022-09-01T11:07:00.000Z</updated>
    </entry>
</feed>
